using DSkin.DirectUI;
using FreeSqlTools.Models;
using RazorEngine;
using RazorEngine.Templating;
using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace FreeSqlTools.Pages
{
    public class CodeGenerate
    {
 
        /// <summary>
        /// 传入任务ID
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<string> Setup(Models.TaskBuild task)
        {


       
            try
            {
                 var paths= await Task.Run(() =>
                 {
                     ///本次要操作的数据库
                     var dataBases = task.TaskBuildInfos.Where(a => a.Level == 1).ToList();
                     string path = string.Empty;
                     foreach (var db in dataBases)
                     {
                         //创建数据库连接
                         using (IFreeSql fsql = new FreeSql.FreeSqlBuilder()
                        .UseConnectionString(db.DataBaseConfig.DataType, db.DataBaseConfig.ConnectionStrings)
                        .Build())
                         {
                             //取指定数据库信息
                             var tables = fsql.DbFirst.GetTablesByDatabase(db.Name);
                             //是否有指定表
                             var uTables = task.TaskBuildInfos.Where(a => a.Level > 1).Select(a=>a.Name).ToArray();
                             if(uTables.Length > 0)
                             {
                                 //过滤不要的表
                                 tables = tables.Where(a => uTables.Contains(a.Name)).ToList();
                             }
                             //根据用户设置组装生成路径并验证目录是否存在
                             path = $"{task.GeneratePath}\\{db.Name}";
                             if (!Directory.Exists(path))
                             {
                                 Directory.CreateDirectory(path);
                             }
                             //开始生成操作
                             foreach (var table in tables)
                             {                
                                 var resHtml = Engine.Razor.RunCompile(task.Templates.Code, Guid.NewGuid().ToString("N"), null, new { fsql, table });
                               
                                 StringBuilder plus = new StringBuilder();
                                 plus.AppendLine("//------------------------------------------------------------------------------");
                                 plus.AppendLine("// <auto-generated>");
                                 plus.AppendLine("//     此代码由工具生成。");
                                 plus.AppendLine("//     运行时版本:" + Environment.Version.ToString());
                                 plus.AppendLine("//     Website: http://www.freesql.net");
                                 plus.AppendLine("//     对此文件的更改可能会导致不正确的行为，并且如果");
                                 plus.AppendLine("//     重新生成代码，这些更改将会丢失。");
                                 plus.AppendLine("// </auto-generated>");
                                 plus.AppendLine("//------------------------------------------------------------------------------");
                                 plus.Append(resHtml);
                                 plus.AppendLine();

                                 File.WriteAllText($"{path}\\{task.FileName.Replace("{name}", table.Name)}", plus.ToString());
                             }
                         }
                     }
                     return path;
                 });

                Process.Start(paths);
                return "全部任务生成完成";
            }
            catch (Exception ex)
            {
                return "生成时发生异常,请检查模版代码.";
            }


        }








        protected string UFString(string text)
        {
            text = Regex.Replace(text, @"[^\w]", "_");
            if (text.Length <= 1) return text.ToUpper();
            else return text.Substring(0, 1).ToUpper() + text.Substring(1, text.Length - 1);
        }
        protected string LFString(string text)
        {
            if (text.Length <= 1) return text.ToLower();
            else return text.Substring(0, 1).ToLower() + text.Substring(1, text.Length - 1);
        }

        protected string GetCsEntityName(string dbname)
        {
            var name = Regex.Replace(dbname.TrimStart('@', '.'), @"[^\w]", "_");
            name = char.IsLetter(name, 0) ? name : string.Concat("_", name);
            if (true) name = UFString(name);
            if (true) name = UFString(name.ToLower());
            if (true) name = name.ToLower();
            if (true) name = string.Join("", name.Split('_').Select(a => UFString(a)));
            return name;
        }

    }
}
